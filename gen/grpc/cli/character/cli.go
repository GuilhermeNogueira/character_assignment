// Code generated by goa v3.8.5, DO NOT EDIT.
//
// character gRPC client CLI support package
//
// Command:
// $ goa gen characters/design

package cli

import (
	characterc "characters/gen/grpc/character/client"
	inventoryc "characters/gen/grpc/inventory/client"
	itemc "characters/gen/grpc/item/client"
	"flag"
	"fmt"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `character (list|show|add|remove|update)
inventory (list|show|show-item|add|add-item|remove-item|remove)
item (list|show|add|remove|update)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` character list` + "\n" +
		os.Args[0] + ` inventory list --message '{
      "characterId": "Pariatur odio architecto nihil."
   }'` + "\n" +
		os.Args[0] + ` item list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		characterFlags = flag.NewFlagSet("character", flag.ContinueOnError)

		characterListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		characterShowFlags       = flag.NewFlagSet("show", flag.ExitOnError)
		characterShowMessageFlag = characterShowFlags.String("message", "", "")
		characterShowViewFlag    = characterShowFlags.String("view", "", "")

		characterAddFlags       = flag.NewFlagSet("add", flag.ExitOnError)
		characterAddMessageFlag = characterAddFlags.String("message", "", "")

		characterRemoveFlags       = flag.NewFlagSet("remove", flag.ExitOnError)
		characterRemoveMessageFlag = characterRemoveFlags.String("message", "", "")

		characterUpdateFlags       = flag.NewFlagSet("update", flag.ExitOnError)
		characterUpdateMessageFlag = characterUpdateFlags.String("message", "", "")

		inventoryFlags = flag.NewFlagSet("inventory", flag.ContinueOnError)

		inventoryListFlags       = flag.NewFlagSet("list", flag.ExitOnError)
		inventoryListMessageFlag = inventoryListFlags.String("message", "", "")

		inventoryShowFlags       = flag.NewFlagSet("show", flag.ExitOnError)
		inventoryShowMessageFlag = inventoryShowFlags.String("message", "", "")
		inventoryShowViewFlag    = inventoryShowFlags.String("view", "", "")

		inventoryShowItemFlags       = flag.NewFlagSet("show-item", flag.ExitOnError)
		inventoryShowItemMessageFlag = inventoryShowItemFlags.String("message", "", "")
		inventoryShowItemViewFlag    = inventoryShowItemFlags.String("view", "", "")

		inventoryAddFlags       = flag.NewFlagSet("add", flag.ExitOnError)
		inventoryAddMessageFlag = inventoryAddFlags.String("message", "", "")

		inventoryAddItemFlags       = flag.NewFlagSet("add-item", flag.ExitOnError)
		inventoryAddItemMessageFlag = inventoryAddItemFlags.String("message", "", "")

		inventoryRemoveItemFlags       = flag.NewFlagSet("remove-item", flag.ExitOnError)
		inventoryRemoveItemMessageFlag = inventoryRemoveItemFlags.String("message", "", "")

		inventoryRemoveFlags       = flag.NewFlagSet("remove", flag.ExitOnError)
		inventoryRemoveMessageFlag = inventoryRemoveFlags.String("message", "", "")

		itemFlags = flag.NewFlagSet("item", flag.ContinueOnError)

		itemListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		itemShowFlags       = flag.NewFlagSet("show", flag.ExitOnError)
		itemShowMessageFlag = itemShowFlags.String("message", "", "")
		itemShowViewFlag    = itemShowFlags.String("view", "", "")

		itemAddFlags       = flag.NewFlagSet("add", flag.ExitOnError)
		itemAddMessageFlag = itemAddFlags.String("message", "", "")

		itemRemoveFlags       = flag.NewFlagSet("remove", flag.ExitOnError)
		itemRemoveMessageFlag = itemRemoveFlags.String("message", "", "")

		itemUpdateFlags       = flag.NewFlagSet("update", flag.ExitOnError)
		itemUpdateMessageFlag = itemUpdateFlags.String("message", "", "")
	)
	characterFlags.Usage = characterUsage
	characterListFlags.Usage = characterListUsage
	characterShowFlags.Usage = characterShowUsage
	characterAddFlags.Usage = characterAddUsage
	characterRemoveFlags.Usage = characterRemoveUsage
	characterUpdateFlags.Usage = characterUpdateUsage

	inventoryFlags.Usage = inventoryUsage
	inventoryListFlags.Usage = inventoryListUsage
	inventoryShowFlags.Usage = inventoryShowUsage
	inventoryShowItemFlags.Usage = inventoryShowItemUsage
	inventoryAddFlags.Usage = inventoryAddUsage
	inventoryAddItemFlags.Usage = inventoryAddItemUsage
	inventoryRemoveItemFlags.Usage = inventoryRemoveItemUsage
	inventoryRemoveFlags.Usage = inventoryRemoveUsage

	itemFlags.Usage = itemUsage
	itemListFlags.Usage = itemListUsage
	itemShowFlags.Usage = itemShowUsage
	itemAddFlags.Usage = itemAddUsage
	itemRemoveFlags.Usage = itemRemoveUsage
	itemUpdateFlags.Usage = itemUpdateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "character":
			svcf = characterFlags
		case "inventory":
			svcf = inventoryFlags
		case "item":
			svcf = itemFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "character":
			switch epn {
			case "list":
				epf = characterListFlags

			case "show":
				epf = characterShowFlags

			case "add":
				epf = characterAddFlags

			case "remove":
				epf = characterRemoveFlags

			case "update":
				epf = characterUpdateFlags

			}

		case "inventory":
			switch epn {
			case "list":
				epf = inventoryListFlags

			case "show":
				epf = inventoryShowFlags

			case "show-item":
				epf = inventoryShowItemFlags

			case "add":
				epf = inventoryAddFlags

			case "add-item":
				epf = inventoryAddItemFlags

			case "remove-item":
				epf = inventoryRemoveItemFlags

			case "remove":
				epf = inventoryRemoveFlags

			}

		case "item":
			switch epn {
			case "list":
				epf = itemListFlags

			case "show":
				epf = itemShowFlags

			case "add":
				epf = itemAddFlags

			case "remove":
				epf = itemRemoveFlags

			case "update":
				epf = itemUpdateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "character":
			c := characterc.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
				data = nil
			case "show":
				endpoint = c.Show()
				data, err = characterc.BuildShowPayload(*characterShowMessageFlag, *characterShowViewFlag)
			case "add":
				endpoint = c.Add()
				data, err = characterc.BuildAddPayload(*characterAddMessageFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = characterc.BuildRemovePayload(*characterRemoveMessageFlag)
			case "update":
				endpoint = c.Update()
				data, err = characterc.BuildUpdatePayload(*characterUpdateMessageFlag)
			}
		case "inventory":
			c := inventoryc.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = inventoryc.BuildListPayload(*inventoryListMessageFlag)
			case "show":
				endpoint = c.Show()
				data, err = inventoryc.BuildShowPayload(*inventoryShowMessageFlag, *inventoryShowViewFlag)
			case "show-item":
				endpoint = c.ShowItem()
				data, err = inventoryc.BuildShowItemPayload(*inventoryShowItemMessageFlag, *inventoryShowItemViewFlag)
			case "add":
				endpoint = c.Add()
				data, err = inventoryc.BuildAddPayload(*inventoryAddMessageFlag)
			case "add-item":
				endpoint = c.AddItem()
				data, err = inventoryc.BuildAddItemPayload(*inventoryAddItemMessageFlag)
			case "remove-item":
				endpoint = c.RemoveItem()
				data, err = inventoryc.BuildRemoveItemPayload(*inventoryRemoveItemMessageFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = inventoryc.BuildRemovePayload(*inventoryRemoveMessageFlag)
			}
		case "item":
			c := itemc.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
				data = nil
			case "show":
				endpoint = c.Show()
				data, err = itemc.BuildShowPayload(*itemShowMessageFlag, *itemShowViewFlag)
			case "add":
				endpoint = c.Add()
				data, err = itemc.BuildAddPayload(*itemAddMessageFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = itemc.BuildRemovePayload(*itemRemoveMessageFlag)
			case "update":
				endpoint = c.Update()
				data, err = itemc.BuildUpdatePayload(*itemUpdateMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// characterUsage displays the usage of the character command and its
// subcommands.
func characterUsage() {
	fmt.Fprintf(os.Stderr, `Public HTTP frontend
Usage:
    %[1]s [globalflags] character COMMAND [flags]

COMMAND:
    list: List all stored bottles
    show: Show character by Id
    add: Add new character and return its ID.
    remove: Remove character
    update:  update 

Additional help:
    %[1]s character COMMAND --help
`, os.Args[0])
}
func characterListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character list

List all stored bottles

Example:
    %[1]s character list
`, os.Args[0])
}

func characterShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character show -message JSON -view STRING

Show character by Id
    -message JSON: 
    -view STRING: 

Example:
    %[1]s character show --message '{
      "id": "Odit voluptatibus voluptatem."
   }' --view "tiny"
`, os.Args[0])
}

func characterAddUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character add -message JSON

Add new character and return its ID.
    -message JSON: 

Example:
    %[1]s character add --message '{
      "description": "A splintered fragment of the same primordial power as the Ancients themselves, Zet endeavors to end the disharmony among the warring factions through whatever means necessary. Solitary foes are thrown into a volatile state of Flux, ripping away their health over time. Distorting space to generate a Protective Field sheltering around allies, evading and attacking with greater efficiency. Zet summons Spark Fragments of its former self that circles in place, and seek out nearby foes. Is there one Arc Warden, or two? Armed with the original\'s items and abilities, the Self\'s Tempest Double duplicates each spell and every attack, bringing twice the chaos to any fight.",
      "experience": 65.21,
      "health": 12.6,
      "name": "Arc Warden"
   }'
`, os.Args[0])
}

func characterRemoveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character remove -message JSON

Remove character
    -message JSON: 

Example:
    %[1]s character remove --message '{
      "id": "Velit aliquid dignissimos et perspiciatis ipsa."
   }'
`, os.Args[0])
}

func characterUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character update -message JSON

 update 
    -message JSON: 

Example:
    %[1]s character update --message '{
      "character": {
         "description": "A splintered fragment of the same primordial power as the Ancients themselves, Zet endeavors to end the disharmony among the warring factions through whatever means necessary. Solitary foes are thrown into a volatile state of Flux, ripping away their health over time. Distorting space to generate a Protective Field sheltering around allies, evading and attacking with greater efficiency. Zet summons Spark Fragments of its former self that circles in place, and seek out nearby foes. Is there one Arc Warden, or two? Armed with the original\'s items and abilities, the Self\'s Tempest Double duplicates each spell and every attack, bringing twice the chaos to any fight.",
         "experience": 65.21,
         "health": 12.6,
         "name": "Arc Warden"
      },
      "id": "Esse nobis."
   }'
`, os.Args[0])
}

// inventoryUsage displays the usage of the inventory command and its
// subcommands.
func inventoryUsage() {
	fmt.Fprintf(os.Stderr, `Public HTTP frontend
Usage:
    %[1]s [globalflags] inventory COMMAND [flags]

COMMAND:
    list: List all items in character inventory
    show: Show inventory by Id
    show-item: Show items in an inventory
    add: Add new inventory and return its ID.
    add-item: Add new item to inventory.
    remove-item: Remove an item from inventory
    remove: Remove Inventory

Additional help:
    %[1]s inventory COMMAND --help
`, os.Args[0])
}
func inventoryListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventory list -message JSON

List all items in character inventory
    -message JSON: 

Example:
    %[1]s inventory list --message '{
      "characterId": "Pariatur odio architecto nihil."
   }'
`, os.Args[0])
}

func inventoryShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventory show -message JSON -view STRING

Show inventory by Id
    -message JSON: 
    -view STRING: 

Example:
    %[1]s inventory show --message '{
      "id": "Sit quia provident consectetur."
   }' --view "default"
`, os.Args[0])
}

func inventoryShowItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventory show-item -message JSON -view STRING

Show items in an inventory
    -message JSON: 
    -view STRING: 

Example:
    %[1]s inventory show-item --message '{
      "id": "Culpa ipsam expedita."
   }' --view "default"
`, os.Args[0])
}

func inventoryAddUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventory add -message JSON

Add new inventory and return its ID.
    -message JSON: 

Example:
    %[1]s inventory add --message '{
      "characterId": "Asperiores cumque dicta minima atque."
   }'
`, os.Args[0])
}

func inventoryAddItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventory add-item -message JSON

Add new item to inventory.
    -message JSON: 

Example:
    %[1]s inventory add-item --message '{
      "id": "Nisi nam iste facere iusto numquam.",
      "itemId": "Eum atque ab natus delectus.",
      "view": "tiny"
   }'
`, os.Args[0])
}

func inventoryRemoveItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventory remove-item -message JSON

Remove an item from inventory
    -message JSON: 

Example:
    %[1]s inventory remove-item --message '{
      "id": "Error rerum ipsa odit officiis eum impedit.",
      "itemId": "Qui et commodi iure est rerum quaerat."
   }'
`, os.Args[0])
}

func inventoryRemoveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventory remove -message JSON

Remove Inventory
    -message JSON: 

Example:
    %[1]s inventory remove --message '{
      "id": "Doloribus tenetur."
   }'
`, os.Args[0])
}

// itemUsage displays the usage of the item command and its subcommands.
func itemUsage() {
	fmt.Fprintf(os.Stderr, `Public HTTP frontend
Usage:
    %[1]s [globalflags] item COMMAND [flags]

COMMAND:
    list: List all stored items
    show: Show character by Id
    add: Add new item and return its ID.
    remove: Remove character
    update:  update 

Additional help:
    %[1]s item COMMAND --help
`, os.Args[0])
}
func itemListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] item list

List all stored items

Example:
    %[1]s item list
`, os.Args[0])
}

func itemShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] item show -message JSON -view STRING

Show character by Id
    -message JSON: 
    -view STRING: 

Example:
    %[1]s item show --message '{
      "id": "Architecto aliquam perferendis aut placeat maxime neque."
   }' --view "tiny"
`, os.Args[0])
}

func itemAddUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] item add -message JSON

Add new item and return its ID.
    -message JSON: 

Example:
    %[1]s item add --message '{
      "damage": 37.8267,
      "description": "Boots of Travel is an item purchasable at the Base Shop, under Accessories. It can be upgraded by purchasing the recipe again.",
      "healing": 12.6,
      "name": "Boots of travel",
      "protection": 65.21
   }'
`, os.Args[0])
}

func itemRemoveUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] item remove -message JSON

Remove character
    -message JSON: 

Example:
    %[1]s item remove --message '{
      "id": "Et laboriosam id."
   }'
`, os.Args[0])
}

func itemUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] item update -message JSON

 update 
    -message JSON: 

Example:
    %[1]s item update --message '{
      "id": "Incidunt nobis est nostrum.",
      "item": {
         "damage": 37.8267,
         "description": "Boots of Travel is an item purchasable at the Base Shop, under Accessories. It can be upgraded by purchasing the recipe again.",
         "healing": 12.6,
         "name": "Boots of travel",
         "protection": 65.21
      }
   }'
`, os.Args[0])
}
