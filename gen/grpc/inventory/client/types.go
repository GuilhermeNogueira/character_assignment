// Code generated by goa v3.8.5, DO NOT EDIT.
//
// inventory gRPC client types
//
// Command:
// $ goa gen characters/design

package client

import (
	inventorypb "characters/gen/grpc/inventory/pb"
	inventory "characters/gen/inventory"
	inventoryviews "characters/gen/inventory/views"
)

// NewProtoListRequest builds the gRPC request type from the payload of the
// "list" endpoint of the "inventory" service.
func NewProtoListRequest(payload *inventory.ListPayload) *inventorypb.ListRequest {
	message := &inventorypb.ListRequest{
		CharacterId: payload.CharacterID,
	}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the
// "inventory" service from the gRPC response type.
func NewListResult(message *inventorypb.StoredInventoryCollection) inventoryviews.StoredInventoryCollectionView {
	result := make([]*inventoryviews.StoredInventoryView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &inventoryviews.StoredInventoryView{
			ID:          &val.Id,
			CharacterID: &val.CharacterId,
		}
		if val.Items != nil {
			result[i].Items = make([]*inventoryviews.StoredItemView, len(val.Items))
			for j, val := range val.Items {
				result[i].Items[j] = &inventoryviews.StoredItemView{
					ID:         &val.Id,
					Name:       &val.Name,
					Damage:     &val.Damage,
					Healing:    &val.Healing,
					Protection: &val.Protection,
				}
				if val.Description != "" {
					result[i].Items[j].Description = &val.Description
				}
			}
		}
	}
	return result
}

// NewProtoShowRequest builds the gRPC request type from the payload of the
// "show" endpoint of the "inventory" service.
func NewProtoShowRequest(payload *inventory.ShowPayload) *inventorypb.ShowRequest {
	message := &inventorypb.ShowRequest{
		Id: payload.ID,
	}
	return message
}

// NewShowResult builds the result type of the "show" endpoint of the
// "inventory" service from the gRPC response type.
func NewShowResult(message *inventorypb.ShowResponse) *inventoryviews.StoredInventoryView {
	result := &inventoryviews.StoredInventoryView{
		ID:          &message.Id,
		CharacterID: &message.CharacterId,
	}
	if message.Items != nil {
		result.Items = make([]*inventoryviews.StoredItemView, len(message.Items))
		for i, val := range message.Items {
			result.Items[i] = &inventoryviews.StoredItemView{
				ID:         &val.Id,
				Name:       &val.Name,
				Damage:     &val.Damage,
				Healing:    &val.Healing,
				Protection: &val.Protection,
			}
			if val.Description != "" {
				result.Items[i].Description = &val.Description
			}
		}
	}
	return result
}

// NewShowNotFoundError builds the error type of the "show" endpoint of the
// "inventory" service from the gRPC error response type.
func NewShowNotFoundError(message *inventorypb.ShowNotFoundError) *inventory.NotFound {
	er := &inventory.NotFound{
		Message: message.Message_,
		ID:      message.Id,
	}
	return er
}

// NewProtoShowItemRequest builds the gRPC request type from the payload of the
// "showItem" endpoint of the "inventory" service.
func NewProtoShowItemRequest(payload *inventory.ShowItemPayload) *inventorypb.ShowItemRequest {
	message := &inventorypb.ShowItemRequest{
		Id: payload.ID,
	}
	return message
}

// NewShowItemResult builds the result type of the "showItem" endpoint of the
// "inventory" service from the gRPC response type.
func NewShowItemResult(message *inventorypb.StoredItemCollection) inventoryviews.StoredItemCollectionView {
	result := make([]*inventoryviews.StoredItemView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &inventoryviews.StoredItemView{
			ID:         &val.Id,
			Name:       &val.Name,
			Damage:     &val.Damage,
			Healing:    &val.Healing,
			Protection: &val.Protection,
		}
		if val.Description != "" {
			result[i].Description = &val.Description
		}
	}
	return result
}

// NewShowItemNotFoundError builds the error type of the "showItem" endpoint of
// the "inventory" service from the gRPC error response type.
func NewShowItemNotFoundError(message *inventorypb.ShowItemNotFoundError) *inventory.NotFound {
	er := &inventory.NotFound{
		Message: message.Message_,
		ID:      message.Id,
	}
	return er
}

// NewProtoAddRequest builds the gRPC request type from the payload of the
// "add" endpoint of the "inventory" service.
func NewProtoAddRequest(payload *inventory.AddPayload) *inventorypb.AddRequest {
	message := &inventorypb.AddRequest{
		CharacterId: payload.CharacterID,
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "inventory"
// service from the gRPC response type.
func NewAddResult(message *inventorypb.AddResponse) string {
	result := message.Field
	return result
}

// NewProtoAddItemRequest builds the gRPC request type from the payload of the
// "addItem" endpoint of the "inventory" service.
func NewProtoAddItemRequest(payload *inventory.AddItemPayload) *inventorypb.AddItemRequest {
	message := &inventorypb.AddItemRequest{
		Id:     payload.ID,
		ItemId: payload.ItemID,
	}
	if payload.View != nil {
		message.View = *payload.View
	}
	return message
}

// NewAddItemResult builds the result type of the "addItem" endpoint of the
// "inventory" service from the gRPC response type.
func NewAddItemResult(message *inventorypb.AddItemResponse) *inventoryviews.StoredInventoryView {
	result := &inventoryviews.StoredInventoryView{
		ID:          &message.Id,
		CharacterID: &message.CharacterId,
	}
	if message.Items != nil {
		result.Items = make([]*inventoryviews.StoredItemView, len(message.Items))
		for i, val := range message.Items {
			result.Items[i] = &inventoryviews.StoredItemView{
				ID:         &val.Id,
				Name:       &val.Name,
				Damage:     &val.Damage,
				Healing:    &val.Healing,
				Protection: &val.Protection,
			}
			if val.Description != "" {
				result.Items[i].Description = &val.Description
			}
		}
	}
	return result
}

// NewProtoRemoveItemRequest builds the gRPC request type from the payload of
// the "removeItem" endpoint of the "inventory" service.
func NewProtoRemoveItemRequest(payload *inventory.RemoveItemPayload) *inventorypb.RemoveItemRequest {
	message := &inventorypb.RemoveItemRequest{
		Id:     payload.ID,
		ItemId: payload.ItemID,
	}
	return message
}

// NewRemoveItemResult builds the result type of the "removeItem" endpoint of
// the "inventory" service from the gRPC response type.
func NewRemoveItemResult(message *inventorypb.RemoveItemResponse) *inventoryviews.StoredInventoryView {
	result := &inventoryviews.StoredInventoryView{
		ID:          &message.Id,
		CharacterID: &message.CharacterId,
	}
	if message.Items != nil {
		result.Items = make([]*inventoryviews.StoredItemView, len(message.Items))
		for i, val := range message.Items {
			result.Items[i] = &inventoryviews.StoredItemView{
				ID:         &val.Id,
				Name:       &val.Name,
				Damage:     &val.Damage,
				Healing:    &val.Healing,
				Protection: &val.Protection,
			}
			if val.Description != "" {
				result.Items[i].Description = &val.Description
			}
		}
	}
	return result
}

// NewProtoRemoveRequest builds the gRPC request type from the payload of the
// "remove" endpoint of the "inventory" service.
func NewProtoRemoveRequest(payload *inventory.RemovePayload) *inventorypb.RemoveRequest {
	message := &inventorypb.RemoveRequest{
		Id: payload.ID,
	}
	return message
}
