// Code generated by goa v3.8.5, DO NOT EDIT.
//
// inventory gRPC client types
//
// Command:
// $ goa gen characters/design

package client

import (
	inventorypb "characters/gen/grpc/inventory/pb"
	inventory "characters/gen/inventory"
	inventoryviews "characters/gen/inventory/views"

	goa "goa.design/goa/v3/pkg"
)

// NewProtoListRequest builds the gRPC request type from the payload of the
// "list" endpoint of the "inventory" service.
func NewProtoListRequest(payload *inventory.ListPayload) *inventorypb.ListRequest {
	message := &inventorypb.ListRequest{
		CharacterId: payload.CharacterID,
	}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the
// "inventory" service from the gRPC response type.
func NewListResult(message *inventorypb.StoredInventoryCollection) inventoryviews.StoredInventoryCollectionView {
	result := make([]*inventoryviews.StoredInventoryView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &inventoryviews.StoredInventoryView{
			ID:          &val.Id,
			CharacterID: &val.CharacterId,
		}
		if val.Items != nil {
			result[i].Items = make([]*inventoryviews.StoredItemView, len(val.Items))
			for j, val := range val.Items {
				result[i].Items[j] = &inventoryviews.StoredItemView{
					ID:   &val.Id,
					Name: &val.Name,
				}
				if val.Description != "" {
					result[i].Items[j].Description = &val.Description
				}
				if val.Damage != 0 {
					result[i].Items[j].Damage = &val.Damage
				}
				if val.Healing != 0 {
					result[i].Items[j].Healing = &val.Healing
				}
				if val.Protection != 0 {
					result[i].Items[j].Protection = &val.Protection
				}
			}
		}
	}
	return result
}

// NewProtoShowRequest builds the gRPC request type from the payload of the
// "show" endpoint of the "inventory" service.
func NewProtoShowRequest(payload *inventory.ShowPayload) *inventorypb.ShowRequest {
	message := &inventorypb.ShowRequest{
		Id: payload.ID,
	}
	return message
}

// NewShowResult builds the result type of the "show" endpoint of the
// "inventory" service from the gRPC response type.
func NewShowResult(message *inventorypb.ShowResponse) *inventoryviews.StoredInventoryView {
	result := &inventoryviews.StoredInventoryView{
		ID:          &message.Id,
		CharacterID: &message.CharacterId,
	}
	if message.Items != nil {
		result.Items = make([]*inventoryviews.StoredItemView, len(message.Items))
		for i, val := range message.Items {
			result.Items[i] = &inventoryviews.StoredItemView{
				ID:   &val.Id,
				Name: &val.Name,
			}
			if val.Description != "" {
				result.Items[i].Description = &val.Description
			}
			if val.Damage != 0 {
				result.Items[i].Damage = &val.Damage
			}
			if val.Healing != 0 {
				result.Items[i].Healing = &val.Healing
			}
			if val.Protection != 0 {
				result.Items[i].Protection = &val.Protection
			}
		}
	}
	return result
}

// NewShowNotFoundError builds the error type of the "show" endpoint of the
// "inventory" service from the gRPC error response type.
func NewShowNotFoundError(message *inventorypb.ShowNotFoundError) *inventory.NotFound {
	er := &inventory.NotFound{
		Message: message.Message_,
		ID:      message.Id,
	}
	return er
}

// NewProtoShowItemRequest builds the gRPC request type from the payload of the
// "showItem" endpoint of the "inventory" service.
func NewProtoShowItemRequest(payload *inventory.ShowItemPayload) *inventorypb.ShowItemRequest {
	message := &inventorypb.ShowItemRequest{
		Id: payload.ID,
	}
	return message
}

// NewShowItemResult builds the result type of the "showItem" endpoint of the
// "inventory" service from the gRPC response type.
func NewShowItemResult(message *inventorypb.StoredItemCollection) inventoryviews.StoredItemCollectionView {
	result := make([]*inventoryviews.StoredItemView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &inventoryviews.StoredItemView{
			ID:   &val.Id,
			Name: &val.Name,
		}
		if val.Description != "" {
			result[i].Description = &val.Description
		}
		if val.Damage != 0 {
			result[i].Damage = &val.Damage
		}
		if val.Healing != 0 {
			result[i].Healing = &val.Healing
		}
		if val.Protection != 0 {
			result[i].Protection = &val.Protection
		}
	}
	return result
}

// NewShowItemNotFoundError builds the error type of the "showItem" endpoint of
// the "inventory" service from the gRPC error response type.
func NewShowItemNotFoundError(message *inventorypb.ShowItemNotFoundError) *inventory.NotFound {
	er := &inventory.NotFound{
		Message: message.Message_,
		ID:      message.Id,
	}
	return er
}

// NewProtoAddRequest builds the gRPC request type from the payload of the
// "add" endpoint of the "inventory" service.
func NewProtoAddRequest(payload *inventory.AddPayload) *inventorypb.AddRequest {
	message := &inventorypb.AddRequest{
		CharacterId: payload.CharacterID,
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "inventory"
// service from the gRPC response type.
func NewAddResult(message *inventorypb.AddResponse) string {
	result := message.Field
	return result
}

// NewProtoAddItemRequest builds the gRPC request type from the payload of the
// "addItem" endpoint of the "inventory" service.
func NewProtoAddItemRequest(payload *inventory.AddItemPayload) *inventorypb.AddItemRequest {
	message := &inventorypb.AddItemRequest{
		Id:     payload.ID,
		ItemId: payload.ItemID,
	}
	if payload.View != nil {
		message.View = *payload.View
	}
	return message
}

// NewAddItemResult builds the result type of the "addItem" endpoint of the
// "inventory" service from the gRPC response type.
func NewAddItemResult(message *inventorypb.AddItemResponse) string {
	result := message.Field
	return result
}

// NewProtoRemoveItemRequest builds the gRPC request type from the payload of
// the "removeItem" endpoint of the "inventory" service.
func NewProtoRemoveItemRequest(payload *inventory.RemoveItemPayload) *inventorypb.RemoveItemRequest {
	message := &inventorypb.RemoveItemRequest{
		Id:     payload.ID,
		ItemId: payload.ItemID,
	}
	return message
}

// NewProtoRemoveRequest builds the gRPC request type from the payload of the
// "remove" endpoint of the "inventory" service.
func NewProtoRemoveRequest(payload *inventory.RemovePayload) *inventorypb.RemoveRequest {
	message := &inventorypb.RemoveRequest{
		Id: payload.ID,
	}
	return message
}

// NewProtoUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "inventory" service.
func NewProtoUpdateRequest(payload *inventory.UpdatePayload) *inventorypb.UpdateRequest {
	message := &inventorypb.UpdateRequest{
		Id: payload.ID,
	}
	if payload.Inventory != nil {
		message.Inventory = svcInventoryInventoryToInventorypbInventory2(payload.Inventory)
	}
	return message
}

// ValidateStoredInventoryCollection runs the validations defined on
// StoredInventoryCollection.
func ValidateStoredInventoryCollection(message *inventorypb.StoredInventoryCollection) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateStoredInventory(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredInventory runs the validations defined on StoredInventory.
func ValidateStoredInventory(elem *inventorypb.StoredInventory) (err error) {
	if elem.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "elem"))
	}
	return
}

// ValidateStoredItem runs the validations defined on StoredItem.
func ValidateStoredItem(elem *inventorypb.StoredItem) (err error) {

	return
}

// ValidateShowResponse runs the validations defined on ShowResponse.
func ValidateShowResponse(message *inventorypb.ShowResponse) (err error) {
	if message.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "message"))
	}
	return
}

// protobufInventorypbInventory2ToInventoryInventory builds a value of type
// *inventory.Inventory from a value of type *inventorypb.Inventory2.
func protobufInventorypbInventory2ToInventoryInventory(v *inventorypb.Inventory2) *inventory.Inventory {
	res := &inventory.Inventory{}
	if v.Character != nil {
		res.Character = protobufInventorypbStoredCharacterToInventoryStoredCharacter(v.Character)
	}
	if v.Items != nil {
		res.Items = make([]*inventory.StoredItem, len(v.Items))
		for i, val := range v.Items {
			res.Items[i] = &inventory.StoredItem{
				ID:         val.Id,
				Name:       val.Name,
				Damage:     val.Damage,
				Healing:    val.Healing,
				Protection: val.Protection,
			}
			if val.Description != "" {
				res.Items[i].Description = &val.Description
			}
		}
	}

	return res
}

// protobufInventorypbStoredCharacterToInventoryStoredCharacter builds a value
// of type *inventory.StoredCharacter from a value of type
// *inventorypb.StoredCharacter.
func protobufInventorypbStoredCharacterToInventoryStoredCharacter(v *inventorypb.StoredCharacter) *inventory.StoredCharacter {
	res := &inventory.StoredCharacter{
		ID:         v.Id,
		Name:       v.Name,
		Health:     v.Health,
		Experience: v.Experience,
	}
	if v.Description != "" {
		res.Description = &v.Description
	}

	return res
}

// svcInventoryInventoryToInventorypbInventory2 builds a value of type
// *inventorypb.Inventory2 from a value of type *inventory.Inventory.
func svcInventoryInventoryToInventorypbInventory2(v *inventory.Inventory) *inventorypb.Inventory2 {
	res := &inventorypb.Inventory2{}
	if v.Character != nil {
		res.Character = svcInventoryStoredCharacterToInventorypbStoredCharacter(v.Character)
	}
	if v.Items != nil {
		res.Items = make([]*inventorypb.StoredItem, len(v.Items))
		for i, val := range v.Items {
			res.Items[i] = &inventorypb.StoredItem{
				Id:         val.ID,
				Name:       val.Name,
				Damage:     val.Damage,
				Healing:    val.Healing,
				Protection: val.Protection,
			}
			if val.Description != nil {
				res.Items[i].Description = *val.Description
			}
		}
	}

	return res
}

// svcInventoryStoredCharacterToInventorypbStoredCharacter builds a value of
// type *inventorypb.StoredCharacter from a value of type
// *inventory.StoredCharacter.
func svcInventoryStoredCharacterToInventorypbStoredCharacter(v *inventory.StoredCharacter) *inventorypb.StoredCharacter {
	res := &inventorypb.StoredCharacter{
		Id:         v.ID,
		Name:       v.Name,
		Health:     v.Health,
		Experience: v.Experience,
	}
	if v.Description != nil {
		res.Description = *v.Description
	}

	return res
}
