// Code generated by goa v3.8.5, DO NOT EDIT.
//
// item gRPC server types
//
// Command:
// $ goa gen characters/design

package server

import (
	itempb "characters/gen/grpc/item/pb"
	item "characters/gen/item"
	itemviews "characters/gen/item/views"

	goa "goa.design/goa/v3/pkg"
)

// NewProtoStoredItemCollection builds the gRPC response type from the result
// of the "list" endpoint of the "item" service.
func NewProtoStoredItemCollection(result itemviews.StoredItemCollectionView) *itempb.StoredItemCollection {
	message := &itempb.StoredItemCollection{}
	message.Field = make([]*itempb.StoredItem, len(result))
	for i, val := range result {
		message.Field[i] = &itempb.StoredItem{}
		if val.ID != nil {
			message.Field[i].Id = *val.ID
		}
		if val.Name != nil {
			message.Field[i].Name = *val.Name
		}
		if val.Description != nil {
			message.Field[i].Description = *val.Description
		}
		if val.Damage != nil {
			message.Field[i].Damage = *val.Damage
		}
		if val.Healing != nil {
			message.Field[i].Healing = *val.Healing
		}
		if val.Protection != nil {
			message.Field[i].Protection = *val.Protection
		}
	}
	return message
}

// NewShowPayload builds the payload of the "show" endpoint of the "item"
// service from the gRPC request type.
func NewShowPayload(message *itempb.ShowRequest, view *string) *item.ShowPayload {
	v := &item.ShowPayload{
		ID: message.Id,
	}
	v.View = view
	return v
}

// NewProtoShowResponse builds the gRPC response type from the result of the
// "show" endpoint of the "item" service.
func NewProtoShowResponse(result *itemviews.StoredItemView) *itempb.ShowResponse {
	message := &itempb.ShowResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	if result.Damage != nil {
		message.Damage = *result.Damage
	}
	if result.Healing != nil {
		message.Healing = *result.Healing
	}
	if result.Protection != nil {
		message.Protection = *result.Protection
	}
	return message
}

// NewShowNotFoundError builds the gRPC error response type from the error of
// the "show" endpoint of the "item" service.
func NewShowNotFoundError(er *item.NotFound) *itempb.ShowNotFoundError {
	message := &itempb.ShowNotFoundError{
		Message_: er.Message,
		Id:       er.ID,
	}
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "item" service
// from the gRPC request type.
func NewAddPayload(message *itempb.AddRequest) *item.Item {
	v := &item.Item{
		Name:       message.Name,
		Damage:     message.Damage,
		Healing:    message.Healing,
		Protection: message.Protection,
	}
	if message.Description != "" {
		v.Description = &message.Description
	}
	return v
}

// NewProtoAddResponse builds the gRPC response type from the result of the
// "add" endpoint of the "item" service.
func NewProtoAddResponse(result string) *itempb.AddResponse {
	message := &itempb.AddResponse{}
	message.Field = result
	return message
}

// NewRemovePayload builds the payload of the "remove" endpoint of the "item"
// service from the gRPC request type.
func NewRemovePayload(message *itempb.RemoveRequest) *item.RemovePayload {
	v := &item.RemovePayload{
		ID: message.Id,
	}
	return v
}

// NewProtoRemoveResponse builds the gRPC response type from the result of the
// "remove" endpoint of the "item" service.
func NewProtoRemoveResponse() *itempb.RemoveResponse {
	message := &itempb.RemoveResponse{}
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the "item"
// service from the gRPC request type.
func NewUpdatePayload(message *itempb.UpdateRequest) *item.UpdatePayload {
	v := &item.UpdatePayload{
		ID: message.Id,
	}
	if message.Item != nil {
		v.Item = protobufItempbItem2ToItemItem(message.Item)
	}
	return v
}

// NewProtoUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "item" service.
func NewProtoUpdateResponse(result *itemviews.StoredItemView) *itempb.UpdateResponse {
	message := &itempb.UpdateResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	if result.Damage != nil {
		message.Damage = *result.Damage
	}
	if result.Healing != nil {
		message.Healing = *result.Healing
	}
	if result.Protection != nil {
		message.Protection = *result.Protection
	}
	return message
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *itempb.UpdateRequest) (err error) {
	if message.Item == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("item", "message"))
	}
	return
}

// ValidateItem2 runs the validations defined on Item2.
func ValidateItem2(item *itempb.Item2) (err error) {

	return
}

// protobufItempbItem2ToItemItem builds a value of type *item.Item from a value
// of type *itempb.Item2.
func protobufItempbItem2ToItemItem(v *itempb.Item2) *item.Item {
	res := &item.Item{
		Name:       v.Name,
		Damage:     v.Damage,
		Healing:    v.Healing,
		Protection: v.Protection,
	}
	if v.Description != "" {
		res.Description = &v.Description
	}

	return res
}

// svcItemItemToItempbItem2 builds a value of type *itempb.Item2 from a value
// of type *item.Item.
func svcItemItemToItempbItem2(v *item.Item) *itempb.Item2 {
	res := &itempb.Item2{
		Name:       v.Name,
		Damage:     v.Damage,
		Healing:    v.Healing,
		Protection: v.Protection,
	}
	if v.Description != nil {
		res.Description = *v.Description
	}

	return res
}
