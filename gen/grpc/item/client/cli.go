// Code generated by goa v3.8.5, DO NOT EDIT.
//
// item gRPC client CLI support package
//
// Command:
// $ goa gen characters/design

package client

import (
	itempb "characters/gen/grpc/item/pb"
	item "characters/gen/item"
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildShowPayload builds the payload for the item show endpoint from CLI
// flags.
func BuildShowPayload(itemShowMessage string, itemShowView string) (*item.ShowPayload, error) {
	var err error
	var message itempb.ShowRequest
	{
		if itemShowMessage != "" {
			err = json.Unmarshal([]byte(itemShowMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Autem dignissimos ex et qui aut.\"\n   }'")
			}
		}
	}
	var view *string
	{
		if itemShowView != "" {
			view = &itemShowView
			if !(*view == "default" || *view == "tiny") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &item.ShowPayload{
		ID: message.Id,
	}
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the item add endpoint from CLI flags.
func BuildAddPayload(itemAddMessage string) (*item.Item, error) {
	var err error
	var message itempb.AddRequest
	{
		if itemAddMessage != "" {
			err = json.Unmarshal([]byte(itemAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 37.8267,\n      \"description\": \"Boots of Travel is an item purchasable at the Base Shop, under Accessories. It can be upgraded by purchasing the recipe again.\",\n      \"healing\": 12.6,\n      \"name\": \"Boots of travel\",\n      \"protection\": 65.21\n   }'")
			}
		}
	}
	v := &item.Item{
		Name:       message.Name,
		Damage:     message.Damage,
		Healing:    message.Healing,
		Protection: message.Protection,
	}
	if message.Description != "" {
		v.Description = &message.Description
	}

	return v, nil
}

// BuildRemovePayload builds the payload for the item remove endpoint from CLI
// flags.
func BuildRemovePayload(itemRemoveMessage string) (*item.RemovePayload, error) {
	var err error
	var message itempb.RemoveRequest
	{
		if itemRemoveMessage != "" {
			err = json.Unmarshal([]byte(itemRemoveMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Expedita qui neque.\"\n   }'")
			}
		}
	}
	v := &item.RemovePayload{
		ID: message.Id,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the item update endpoint from CLI
// flags.
func BuildUpdatePayload(itemUpdateMessage string) (*item.UpdatePayload, error) {
	var err error
	var message itempb.UpdateRequest
	{
		if itemUpdateMessage != "" {
			err = json.Unmarshal([]byte(itemUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"character\": {\n         \"description\": \"A splintered fragment of the same primordial power as the Ancients themselves, Zet endeavors to end the disharmony among the warring factions through whatever means necessary. Solitary foes are thrown into a volatile state of Flux, ripping away their health over time. Distorting space to generate a Protective Field sheltering around allies, evading and attacking with greater efficiency. Zet summons Spark Fragments of its former self that circles in place, and seek out nearby foes. Is there one Arc Warden, or two? Armed with the original\\'s items and abilities, the Self\\'s Tempest Double duplicates each spell and every attack, bringing twice the chaos to any fight.\",\n         \"experience\": 65.21,\n         \"health\": 12.6,\n         \"name\": \"Arc Warden\"\n      },\n      \"id\": \"Quam recusandae totam maxime qui.\"\n   }'")
			}
		}
	}
	v := &item.UpdatePayload{
		ID: message.Id,
	}
	if message.Character != nil {
		v.Character = protobufItempbCharacterToItemCharacter(message.Character)
	}

	return v, nil
}
