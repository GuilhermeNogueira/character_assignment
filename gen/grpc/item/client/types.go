// Code generated by goa v3.8.5, DO NOT EDIT.
//
// item gRPC client types
//
// Command:
// $ goa gen characters/design

package client

import (
	itempb "characters/gen/grpc/item/pb"
	item "characters/gen/item"
	itemviews "characters/gen/item/views"
)

// NewProtoListRequest builds the gRPC request type from the payload of the
// "list" endpoint of the "item" service.
func NewProtoListRequest() *itempb.ListRequest {
	message := &itempb.ListRequest{}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the "item"
// service from the gRPC response type.
func NewListResult(message *itempb.StoredItemCollection) itemviews.StoredItemCollectionView {
	result := make([]*itemviews.StoredItemView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &itemviews.StoredItemView{
			ID:   &val.Id,
			Name: &val.Name,
		}
		if val.Description != "" {
			result[i].Description = &val.Description
		}
		if val.Damage != 0 {
			result[i].Damage = &val.Damage
		}
		if val.Healing != 0 {
			result[i].Healing = &val.Healing
		}
		if val.Protection != 0 {
			result[i].Protection = &val.Protection
		}
	}
	return result
}

// NewProtoShowRequest builds the gRPC request type from the payload of the
// "show" endpoint of the "item" service.
func NewProtoShowRequest(payload *item.ShowPayload) *itempb.ShowRequest {
	message := &itempb.ShowRequest{
		Id: payload.ID,
	}
	return message
}

// NewShowResult builds the result type of the "show" endpoint of the "item"
// service from the gRPC response type.
func NewShowResult(message *itempb.ShowResponse) *itemviews.StoredItemView {
	result := &itemviews.StoredItemView{
		ID:   &message.Id,
		Name: &message.Name,
	}
	if message.Description != "" {
		result.Description = &message.Description
	}
	if message.Damage != 0 {
		result.Damage = &message.Damage
	}
	if message.Healing != 0 {
		result.Healing = &message.Healing
	}
	if message.Protection != 0 {
		result.Protection = &message.Protection
	}
	return result
}

// NewShowNotFoundError builds the error type of the "show" endpoint of the
// "item" service from the gRPC error response type.
func NewShowNotFoundError(message *itempb.ShowNotFoundError) *item.NotFound {
	er := &item.NotFound{
		Message: message.Message_,
		ID:      message.Id,
	}
	return er
}

// NewProtoAddRequest builds the gRPC request type from the payload of the
// "add" endpoint of the "item" service.
func NewProtoAddRequest(payload *item.Item) *itempb.AddRequest {
	message := &itempb.AddRequest{
		Name:       payload.Name,
		Damage:     payload.Damage,
		Healing:    payload.Healing,
		Protection: payload.Protection,
	}
	if payload.Description != nil {
		message.Description = *payload.Description
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "item"
// service from the gRPC response type.
func NewAddResult(message *itempb.AddResponse) string {
	result := message.Field
	return result
}

// NewProtoRemoveRequest builds the gRPC request type from the payload of the
// "remove" endpoint of the "item" service.
func NewProtoRemoveRequest(payload *item.RemovePayload) *itempb.RemoveRequest {
	message := &itempb.RemoveRequest{
		Id: payload.ID,
	}
	return message
}

// NewProtoUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "item" service.
func NewProtoUpdateRequest(payload *item.UpdatePayload) *itempb.UpdateRequest {
	message := &itempb.UpdateRequest{
		Id: payload.ID,
	}
	if payload.Character != nil {
		message.Character = svcItemCharacterToItempbCharacter(payload.Character)
	}
	return message
}

// NewUpdateResult builds the result type of the "update" endpoint of the
// "item" service from the gRPC response type.
func NewUpdateResult(message *itempb.UpdateResponse) *itemviews.StoredItemView {
	result := &itemviews.StoredItemView{
		ID:   &message.Id,
		Name: &message.Name,
	}
	if message.Description != "" {
		result.Description = &message.Description
	}
	if message.Damage != 0 {
		result.Damage = &message.Damage
	}
	if message.Healing != 0 {
		result.Healing = &message.Healing
	}
	if message.Protection != 0 {
		result.Protection = &message.Protection
	}
	return result
}

// protobufItempbCharacterToItemCharacter builds a value of type
// *item.Character from a value of type *itempb.Character.
func protobufItempbCharacterToItemCharacter(v *itempb.Character) *item.Character {
	res := &item.Character{
		Name:       v.Name,
		Health:     v.Health,
		Experience: v.Experience,
	}
	if v.Description != "" {
		res.Description = &v.Description
	}

	return res
}

// svcItemCharacterToItempbCharacter builds a value of type *itempb.Character
// from a value of type *item.Character.
func svcItemCharacterToItempbCharacter(v *item.Character) *itempb.Character {
	res := &itempb.Character{
		Name:       v.Name,
		Health:     v.Health,
		Experience: v.Experience,
	}
	if v.Description != nil {
		res.Description = *v.Description
	}

	return res
}
