// Code generated by goa v3.8.5, DO NOT EDIT.
//
// character gRPC server types
//
// Command:
// $ goa gen characters/design

package server

import (
	character "characters/gen/character"
	characterviews "characters/gen/character/views"
	characterpb "characters/gen/grpc/character/pb"

	goa "goa.design/goa/v3/pkg"
)

// NewProtoStoredCharacterCollection builds the gRPC response type from the
// result of the "list" endpoint of the "character" service.
func NewProtoStoredCharacterCollection(result characterviews.StoredCharacterCollectionView) *characterpb.StoredCharacterCollection {
	message := &characterpb.StoredCharacterCollection{}
	message.Field = make([]*characterpb.StoredCharacter, len(result))
	for i, val := range result {
		message.Field[i] = &characterpb.StoredCharacter{}
		if val.ID != nil {
			message.Field[i].Id = *val.ID
		}
		if val.Name != nil {
			message.Field[i].Name = *val.Name
		}
		if val.Description != nil {
			message.Field[i].Description = *val.Description
		}
		if val.Health != nil {
			message.Field[i].Health = *val.Health
		}
		if val.Experience != nil {
			message.Field[i].Experience = *val.Experience
		}
	}
	return message
}

// NewShowPayload builds the payload of the "show" endpoint of the "character"
// service from the gRPC request type.
func NewShowPayload(message *characterpb.ShowRequest, view *string) *character.ShowPayload {
	v := &character.ShowPayload{
		ID: message.Id,
	}
	v.View = view
	return v
}

// NewProtoShowResponse builds the gRPC response type from the result of the
// "show" endpoint of the "character" service.
func NewProtoShowResponse(result *characterviews.StoredCharacterView) *characterpb.ShowResponse {
	message := &characterpb.ShowResponse{}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	if result.Health != nil {
		message.Health = *result.Health
	}
	if result.Experience != nil {
		message.Experience = *result.Experience
	}
	return message
}

// NewShowNotFoundError builds the gRPC error response type from the error of
// the "show" endpoint of the "character" service.
func NewShowNotFoundError(er *character.NotFound) *characterpb.ShowNotFoundError {
	message := &characterpb.ShowNotFoundError{
		Message_: er.Message,
		Id:       er.ID,
	}
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "character"
// service from the gRPC request type.
func NewAddPayload(message *characterpb.AddRequest) *character.Character {
	v := &character.Character{
		Name:       message.Name,
		Health:     message.Health,
		Experience: message.Experience,
	}
	if message.Description != "" {
		v.Description = &message.Description
	}
	return v
}

// NewProtoAddResponse builds the gRPC response type from the result of the
// "add" endpoint of the "character" service.
func NewProtoAddResponse(result string) *characterpb.AddResponse {
	message := &characterpb.AddResponse{}
	message.Field = result
	return message
}

// NewRemovePayload builds the payload of the "remove" endpoint of the
// "character" service from the gRPC request type.
func NewRemovePayload(message *characterpb.RemoveRequest) *character.RemovePayload {
	v := &character.RemovePayload{
		ID: message.Id,
	}
	return v
}

// NewProtoRemoveResponse builds the gRPC response type from the result of the
// "remove" endpoint of the "character" service.
func NewProtoRemoveResponse() *characterpb.RemoveResponse {
	message := &characterpb.RemoveResponse{}
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the
// "character" service from the gRPC request type.
func NewUpdatePayload(message *characterpb.UpdateRequest) *character.UpdatePayload {
	v := &character.UpdatePayload{
		ID: message.Id,
	}
	if message.Character != nil {
		v.Character = protobufCharacterpbCharacter2ToCharacterCharacter(message.Character)
	}
	return v
}

// NewProtoUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "character" service.
func NewProtoUpdateResponse() *characterpb.UpdateResponse {
	message := &characterpb.UpdateResponse{}
	return message
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *characterpb.UpdateRequest) (err error) {
	if message.Character == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("character", "message"))
	}
	return
}

// ValidateCharacter2 runs the validations defined on Character2.
func ValidateCharacter2(character *characterpb.Character2) (err error) {

	return
}

// protobufCharacterpbCharacter2ToCharacterCharacter builds a value of type
// *character.Character from a value of type *characterpb.Character2.
func protobufCharacterpbCharacter2ToCharacterCharacter(v *characterpb.Character2) *character.Character {
	res := &character.Character{
		Name:       v.Name,
		Health:     v.Health,
		Experience: v.Experience,
	}
	if v.Description != "" {
		res.Description = &v.Description
	}

	return res
}

// svcCharacterCharacterToCharacterpbCharacter2 builds a value of type
// *characterpb.Character2 from a value of type *character.Character.
func svcCharacterCharacterToCharacterpbCharacter2(v *character.Character) *characterpb.Character2 {
	res := &characterpb.Character2{
		Name:       v.Name,
		Health:     v.Health,
		Experience: v.Experience,
	}
	if v.Description != nil {
		res.Description = *v.Description
	}

	return res
}
