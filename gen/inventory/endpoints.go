// Code generated by goa v3.8.5, DO NOT EDIT.
//
// inventory endpoints
//
// Command:
// $ goa gen characters/design

package inventory

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "inventory" service endpoints.
type Endpoints struct {
	List       goa.Endpoint
	Show       goa.Endpoint
	ShowItem   goa.Endpoint
	Add        goa.Endpoint
	AddItem    goa.Endpoint
	RemoveItem goa.Endpoint
	Remove     goa.Endpoint
}

// NewEndpoints wraps the methods of the "inventory" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		List:       NewListEndpoint(s),
		Show:       NewShowEndpoint(s),
		ShowItem:   NewShowItemEndpoint(s),
		Add:        NewAddEndpoint(s),
		AddItem:    NewAddItemEndpoint(s),
		RemoveItem: NewRemoveItemEndpoint(s),
		Remove:     NewRemoveEndpoint(s),
	}
}

// Use applies the given middleware to all the "inventory" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.List = m(e.List)
	e.Show = m(e.Show)
	e.ShowItem = m(e.ShowItem)
	e.Add = m(e.Add)
	e.AddItem = m(e.AddItem)
	e.RemoveItem = m(e.RemoveItem)
	e.Remove = m(e.Remove)
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "inventory".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListPayload)
		res, err := s.List(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredInventoryCollection(res, "tiny")
		return vres, nil
	}
}

// NewShowEndpoint returns an endpoint function that calls the method "show" of
// service "inventory".
func NewShowEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ShowPayload)
		res, view, err := s.Show(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredInventory(res, view)
		return vres, nil
	}
}

// NewShowItemEndpoint returns an endpoint function that calls the method
// "showItem" of service "inventory".
func NewShowItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ShowItemPayload)
		res, err := s.ShowItem(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredItemCollection(res, "tiny")
		return vres, nil
	}
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "inventory".
func NewAddEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AddPayload)
		return s.Add(ctx, p)
	}
}

// NewAddItemEndpoint returns an endpoint function that calls the method
// "addItem" of service "inventory".
func NewAddItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AddItemPayload)
		res, view, err := s.AddItem(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredInventory(res, view)
		return vres, nil
	}
}

// NewRemoveItemEndpoint returns an endpoint function that calls the method
// "removeItem" of service "inventory".
func NewRemoveItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RemoveItemPayload)
		res, view, err := s.RemoveItem(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredInventory(res, view)
		return vres, nil
	}
}

// NewRemoveEndpoint returns an endpoint function that calls the method
// "remove" of service "inventory".
func NewRemoveEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RemovePayload)
		return nil, s.Remove(ctx, p)
	}
}
