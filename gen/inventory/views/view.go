// Code generated by goa v3.8.5, DO NOT EDIT.
//
// inventory views
//
// Command:
// $ goa gen characters/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// StoredInventoryCollection is the viewed result type that is projected based
// on a view.
type StoredInventoryCollection struct {
	// Type to project
	Projected StoredInventoryCollectionView
	// View to render
	View string
}

// StoredInventory is the viewed result type that is projected based on a view.
type StoredInventory struct {
	// Type to project
	Projected *StoredInventoryView
	// View to render
	View string
}

// StoredItemCollection is the viewed result type that is projected based on a
// view.
type StoredItemCollection struct {
	// Type to project
	Projected StoredItemCollectionView
	// View to render
	View string
}

// StoredInventoryCollectionView is a type that runs validations on a projected
// type.
type StoredInventoryCollectionView []*StoredInventoryView

// StoredInventoryView is a type that runs validations on a projected type.
type StoredInventoryView struct {
	// ID is the unique id of the inventory.
	ID *string
	// CharacterId
	CharacterID *string
	// Character items
	Items []*StoredItemView
}

// StoredItemView is a type that runs validations on a projected type.
type StoredItemView struct {
	// ID is the unique id of the Item.
	ID *string
	// Name
	Name *string
	// Description
	Description *string
	// Damage
	Damage *float64
	// Healing
	Healing *float64
	// Protection
	Protection *float64
}

// StoredItemCollectionView is a type that runs validations on a projected type.
type StoredItemCollectionView []*StoredItemView

var (
	// StoredInventoryCollectionMap is a map indexing the attribute names of
	// StoredInventoryCollection by view name.
	StoredInventoryCollectionMap = map[string][]string{
		"default": {
			"id",
			"characterId",
			"items",
		},
		"tiny": {
			"id",
			"characterId",
			"items",
		},
	}
	// StoredInventoryMap is a map indexing the attribute names of StoredInventory
	// by view name.
	StoredInventoryMap = map[string][]string{
		"default": {
			"id",
			"characterId",
			"items",
		},
		"tiny": {
			"id",
			"characterId",
			"items",
		},
	}
	// StoredItemCollectionMap is a map indexing the attribute names of
	// StoredItemCollection by view name.
	StoredItemCollectionMap = map[string][]string{
		"default": {
			"id",
			"name",
			"description",
			"damage",
			"healing",
			"protection",
		},
		"tiny": {
			"id",
			"name",
			"damage",
			"healing",
			"protection",
		},
	}
	// StoredItemMap is a map indexing the attribute names of StoredItem by view
	// name.
	StoredItemMap = map[string][]string{
		"default": {
			"id",
			"name",
			"description",
			"damage",
			"healing",
			"protection",
		},
		"tiny": {
			"id",
			"name",
			"damage",
			"healing",
			"protection",
		},
	}
)

// ValidateStoredInventoryCollection runs the validations defined on the viewed
// result type StoredInventoryCollection.
func ValidateStoredInventoryCollection(result StoredInventoryCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredInventoryCollectionView(result.Projected)
	case "tiny":
		err = ValidateStoredInventoryCollectionViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredInventory runs the validations defined on the viewed result
// type StoredInventory.
func ValidateStoredInventory(result *StoredInventory) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredInventoryView(result.Projected)
	case "tiny":
		err = ValidateStoredInventoryViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredItemCollection runs the validations defined on the viewed
// result type StoredItemCollection.
func ValidateStoredItemCollection(result StoredItemCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredItemCollectionView(result.Projected)
	case "tiny":
		err = ValidateStoredItemCollectionViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredInventoryCollectionView runs the validations defined on
// StoredInventoryCollectionView using the "default" view.
func ValidateStoredInventoryCollectionView(result StoredInventoryCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredInventoryView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredInventoryCollectionViewTiny runs the validations defined on
// StoredInventoryCollectionView using the "tiny" view.
func ValidateStoredInventoryCollectionViewTiny(result StoredInventoryCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredInventoryViewTiny(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredInventoryView runs the validations defined on
// StoredInventoryView using the "default" view.
func ValidateStoredInventoryView(result *StoredInventoryView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.CharacterID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("characterId", "result"))
	}
	if result.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "result"))
	}
	for _, e := range result.Items {
		if e != nil {
			if err2 := ValidateStoredItemView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredInventoryViewTiny runs the validations defined on
// StoredInventoryView using the "tiny" view.
func ValidateStoredInventoryViewTiny(result *StoredInventoryView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.CharacterID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("characterId", "result"))
	}
	if result.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "result"))
	}
	for _, e := range result.Items {
		if e != nil {
			if err2 := ValidateStoredItemView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredItemView runs the validations defined on StoredItemView using
// the "default" view.
func ValidateStoredItemView(result *StoredItemView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidateStoredItemViewTiny runs the validations defined on StoredItemView
// using the "tiny" view.
func ValidateStoredItemViewTiny(result *StoredItemView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidateStoredItemCollectionView runs the validations defined on
// StoredItemCollectionView using the "default" view.
func ValidateStoredItemCollectionView(result StoredItemCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredItemView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredItemCollectionViewTiny runs the validations defined on
// StoredItemCollectionView using the "tiny" view.
func ValidateStoredItemCollectionViewTiny(result StoredItemCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredItemViewTiny(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
