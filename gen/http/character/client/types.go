// Code generated by goa v3.8.5, DO NOT EDIT.
//
// character HTTP client types
//
// Command:
// $ goa gen characters/design

package client

import (
	character "characters/gen/character"
	characterviews "characters/gen/character/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "character" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Name
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Health
	Health float64 `form:"health" json:"health" xml:"health"`
	// Experience
	Experience float64 `form:"experience" json:"experience" xml:"experience"`
}

// UpdateRequestBody is the type of the "character" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// character to update
	Character *CharacterRequestBody `form:"character" json:"character" xml:"character"`
}

// ListResponseBody is the type of the "character" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredCharacterResponse

// ShowResponseBody is the type of the "character" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the character.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Health
	Health *float64 `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Experience
	Experience *float64 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "character" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// StoredCharacterResponse is used to define fields on response body types.
type StoredCharacterResponse struct {
	// ID is the unique id of the character.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Health
	Health *float64 `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Experience
	Experience *float64 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// CharacterRequestBody is used to define fields on request body types.
type CharacterRequestBody struct {
	// Name
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Health
	Health float64 `form:"health" json:"health" xml:"health"`
	// Experience
	Experience float64 `form:"experience" json:"experience" xml:"experience"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "character" service.
func NewAddRequestBody(p *character.Character) *AddRequestBody {
	body := &AddRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Health:      p.Health,
		Experience:  p.Experience,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "character" service.
func NewUpdateRequestBody(p *character.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.Character != nil {
		body.Character = marshalCharacterCharacterToCharacterRequestBody(p.Character)
	}
	return body
}

// NewListStoredCharacterCollectionOK builds a "character" service "list"
// endpoint result from a HTTP "OK" response.
func NewListStoredCharacterCollectionOK(body ListResponseBody) characterviews.StoredCharacterCollectionView {
	v := make([]*characterviews.StoredCharacterView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredCharacterResponseToCharacterviewsStoredCharacterView(val)
	}

	return v
}

// NewShowStoredCharacterOK builds a "character" service "show" endpoint result
// from a HTTP "OK" response.
func NewShowStoredCharacterOK(body *ShowResponseBody) *characterviews.StoredCharacterView {
	v := &characterviews.StoredCharacterView{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}

	return v
}

// NewShowNotFound builds a character service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *character.NotFound {
	v := &character.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateStoredCharacterResponse runs the validations defined on
// StoredCharacterResponse
func ValidateStoredCharacterResponse(body *StoredCharacterResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Health == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("health", "body"))
	}
	if body.Experience == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("experience", "body"))
	}
	return
}
