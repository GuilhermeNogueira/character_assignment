// Code generated by goa v3.8.5, DO NOT EDIT.
//
// inventory HTTP client encoders and decoders
//
// Command:
// $ goa gen characters/design

package client

import (
	"bytes"
	inventory "characters/gen/inventory"
	inventoryviews "characters/gen/inventory/views"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "inventory" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		characterID string
	)
	{
		p, ok := v.(*inventory.ListPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("inventory", "list", "*inventory.ListPayload", v)
		}
		characterID = p.CharacterID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListInventoryPath(characterID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("inventory", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the inventory
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "list", err)
			}
			p := NewListStoredInventoryCollectionOK(body)
			view := "tiny"
			vres := inventoryviews.StoredInventoryCollection{Projected: p, View: view}
			if err = inventoryviews.ValidateStoredInventoryCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("inventory", "list", err)
			}
			res := inventory.NewStoredInventoryCollection(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("inventory", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "inventory" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		characterID string
		id          string
	)
	{
		p, ok := v.(*inventory.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("inventory", "show", "*inventory.ShowPayload", v)
		}
		if p.CharacterID != nil {
			characterID = *p.CharacterID
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowInventoryPath(characterID, id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("inventory", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the inventory show
// server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*inventory.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("inventory", "show", "*inventory.ShowPayload", v)
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the inventory
// show endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeShowResponse may return the following errors:
//   - "not_found" (type *inventory.NotFound): http.StatusNotFound
//   - error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "show", err)
			}
			p := NewShowStoredInventoryOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &inventoryviews.StoredInventory{Projected: p, View: view}
			if err = inventoryviews.ValidateStoredInventory(vres); err != nil {
				return nil, goahttp.ErrValidationError("inventory", "show", err)
			}
			res := inventory.NewStoredInventory(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("inventory", "show", err)
			}
			return nil, NewShowNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("inventory", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildShowItemRequest instantiates a HTTP request object with method and path
// set to call the "inventory" service "showItem" endpoint
func (c *Client) BuildShowItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		characterID string
		id          string
	)
	{
		p, ok := v.(*inventory.ShowItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("inventory", "showItem", "*inventory.ShowItemPayload", v)
		}
		if p.CharacterID != nil {
			characterID = *p.CharacterID
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowItemInventoryPath(characterID, id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("inventory", "showItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowItemRequest returns an encoder for requests sent to the inventory
// showItem server.
func EncodeShowItemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*inventory.ShowItemPayload)
		if !ok {
			return goahttp.ErrInvalidType("inventory", "showItem", "*inventory.ShowItemPayload", v)
		}
		values := req.URL.Query()
		if p.View != nil {
			values.Add("view", *p.View)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeShowItemResponse returns a decoder for responses returned by the
// inventory showItem endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeShowItemResponse may return the following errors:
//   - "not_found" (type *inventory.NotFound): http.StatusNotFound
//   - error: internal error
func DecodeShowItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "showItem", err)
			}
			p := NewShowItemStoredItemCollectionOK(body)
			view := "tiny"
			vres := inventoryviews.StoredItemCollection{Projected: p, View: view}
			if err = inventoryviews.ValidateStoredItemCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("inventory", "showItem", err)
			}
			res := inventory.NewStoredItemCollection(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowItemNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "showItem", err)
			}
			err = ValidateShowItemNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("inventory", "showItem", err)
			}
			return nil, NewShowItemNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("inventory", "showItem", resp.StatusCode, string(body))
		}
	}
}

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "inventory" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		characterID string
	)
	{
		p, ok := v.(*inventory.AddPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("inventory", "add", "*inventory.AddPayload", v)
		}
		characterID = p.CharacterID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddInventoryPath(characterID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("inventory", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAddResponse returns a decoder for responses returned by the inventory
// add endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "add", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("inventory", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildAddItemRequest instantiates a HTTP request object with method and path
// set to call the "inventory" service "addItem" endpoint
func (c *Client) BuildAddItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		characterID string
		id          string
		itemID      string
	)
	{
		p, ok := v.(*inventory.AddItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("inventory", "addItem", "*inventory.AddItemPayload", v)
		}
		if p.CharacterID != nil {
			characterID = *p.CharacterID
		}
		id = p.ID
		itemID = p.ItemID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddItemInventoryPath(characterID, id, itemID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("inventory", "addItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddItemRequest returns an encoder for requests sent to the inventory
// addItem server.
func EncodeAddItemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*inventory.AddItemPayload)
		if !ok {
			return goahttp.ErrInvalidType("inventory", "addItem", "*inventory.AddItemPayload", v)
		}
		body := NewAddItemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("inventory", "addItem", err)
		}
		return nil
	}
}

// DecodeAddItemResponse returns a decoder for responses returned by the
// inventory addItem endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeAddItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "addItem", err)
			}
			p := NewAddItemStoredInventoryOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &inventoryviews.StoredInventory{Projected: p, View: view}
			if err = inventoryviews.ValidateStoredInventory(vres); err != nil {
				return nil, goahttp.ErrValidationError("inventory", "addItem", err)
			}
			res := inventory.NewStoredInventory(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("inventory", "addItem", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveItemRequest instantiates a HTTP request object with method and
// path set to call the "inventory" service "removeItem" endpoint
func (c *Client) BuildRemoveItemRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		characterID string
		id          string
		itemID      string
	)
	{
		p, ok := v.(*inventory.RemoveItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("inventory", "removeItem", "*inventory.RemoveItemPayload", v)
		}
		if p.CharacterID != nil {
			characterID = *p.CharacterID
		}
		id = p.ID
		itemID = p.ItemID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveItemInventoryPath(characterID, id, itemID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("inventory", "removeItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRemoveItemResponse returns a decoder for responses returned by the
// inventory removeItem endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeRemoveItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RemoveItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("inventory", "removeItem", err)
			}
			p := NewRemoveItemStoredInventoryOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &inventoryviews.StoredInventory{Projected: p, View: view}
			if err = inventoryviews.ValidateStoredInventory(vres); err != nil {
				return nil, goahttp.ErrValidationError("inventory", "removeItem", err)
			}
			res := inventory.NewStoredInventory(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("inventory", "removeItem", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveRequest instantiates a HTTP request object with method and path
// set to call the "inventory" service "remove" endpoint
func (c *Client) BuildRemoveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		characterID string
		id          string
	)
	{
		p, ok := v.(*inventory.RemovePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("inventory", "remove", "*inventory.RemovePayload", v)
		}
		if p.CharacterID != nil {
			characterID = *p.CharacterID
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveInventoryPath(characterID, id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("inventory", "remove", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRemoveResponse returns a decoder for responses returned by the
// inventory remove endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeRemoveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("inventory", "remove", resp.StatusCode, string(body))
		}
	}
}

// unmarshalStoredInventoryResponseToInventoryviewsStoredInventoryView builds a
// value of type *inventoryviews.StoredInventoryView from a value of type
// *StoredInventoryResponse.
func unmarshalStoredInventoryResponseToInventoryviewsStoredInventoryView(v *StoredInventoryResponse) *inventoryviews.StoredInventoryView {
	res := &inventoryviews.StoredInventoryView{
		ID:          v.ID,
		CharacterID: v.CharacterID,
	}
	res.Items = make([]*inventoryviews.StoredItemView, len(v.Items))
	for i, val := range v.Items {
		res.Items[i] = unmarshalStoredItemResponseToInventoryviewsStoredItemView(val)
	}

	return res
}

// unmarshalStoredItemResponseToInventoryviewsStoredItemView builds a value of
// type *inventoryviews.StoredItemView from a value of type *StoredItemResponse.
func unmarshalStoredItemResponseToInventoryviewsStoredItemView(v *StoredItemResponse) *inventoryviews.StoredItemView {
	res := &inventoryviews.StoredItemView{
		ID:          v.ID,
		Name:        v.Name,
		Description: v.Description,
		Damage:      v.Damage,
		Healing:     v.Healing,
		Protection:  v.Protection,
	}

	return res
}

// unmarshalStoredItemResponseBodyToInventoryviewsStoredItemView builds a value
// of type *inventoryviews.StoredItemView from a value of type
// *StoredItemResponseBody.
func unmarshalStoredItemResponseBodyToInventoryviewsStoredItemView(v *StoredItemResponseBody) *inventoryviews.StoredItemView {
	res := &inventoryviews.StoredItemView{
		ID:          v.ID,
		Name:        v.Name,
		Description: v.Description,
		Damage:      v.Damage,
		Healing:     v.Healing,
		Protection:  v.Protection,
	}

	return res
}
