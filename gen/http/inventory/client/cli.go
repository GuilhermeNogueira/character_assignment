// Code generated by goa v3.8.5, DO NOT EDIT.
//
// inventory HTTP client CLI support package
//
// Command:
// $ goa gen characters/design

package client

import (
	inventory "characters/gen/inventory"
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the inventory list endpoint from CLI
// flags.
func BuildListPayload(inventoryListCharacterID string) (*inventory.ListPayload, error) {
	var characterID string
	{
		characterID = inventoryListCharacterID
	}
	v := &inventory.ListPayload{}
	v.CharacterID = characterID

	return v, nil
}

// BuildShowPayload builds the payload for the inventory show endpoint from CLI
// flags.
func BuildShowPayload(inventoryShowID string, inventoryShowView string) (*inventory.ShowPayload, error) {
	var err error
	var id string
	{
		id = inventoryShowID
	}
	var view *string
	{
		if inventoryShowView != "" {
			view = &inventoryShowView
			if !(*view == "default" || *view == "tiny") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &inventory.ShowPayload{}
	v.ID = id
	v.View = view

	return v, nil
}

// BuildShowItemPayload builds the payload for the inventory showItem endpoint
// from CLI flags.
func BuildShowItemPayload(inventoryShowItemID string, inventoryShowItemView string) (*inventory.ShowItemPayload, error) {
	var err error
	var id string
	{
		id = inventoryShowItemID
	}
	var view *string
	{
		if inventoryShowItemView != "" {
			view = &inventoryShowItemView
			if !(*view == "default" || *view == "tiny") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &inventory.ShowItemPayload{}
	v.ID = id
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the inventory add endpoint from CLI
// flags.
func BuildAddPayload(inventoryAddBody string) (*inventory.AddPayload, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(inventoryAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"characterId\": \"Eum est.\"\n   }'")
		}
	}
	v := &inventory.AddPayload{
		CharacterID: body.CharacterID,
	}

	return v, nil
}

// BuildAddItemPayload builds the payload for the inventory addItem endpoint
// from CLI flags.
func BuildAddItemPayload(inventoryAddItemBody string, inventoryAddItemID string, inventoryAddItemItemID string) (*inventory.AddItemPayload, error) {
	var err error
	var body AddItemRequestBody
	{
		err = json.Unmarshal([]byte(inventoryAddItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"view\": \"tiny\"\n   }'")
		}
		if body.View != nil {
			if !(*body.View == "default" || *body.View == "tiny") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.view", *body.View, []interface{}{"default", "tiny"}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = inventoryAddItemID
	}
	var itemID string
	{
		itemID = inventoryAddItemItemID
	}
	v := &inventory.AddItemPayload{
		View: body.View,
	}
	v.ID = id
	v.ItemID = itemID

	return v, nil
}

// BuildRemoveItemPayload builds the payload for the inventory removeItem
// endpoint from CLI flags.
func BuildRemoveItemPayload(inventoryRemoveItemID string, inventoryRemoveItemItemID string) (*inventory.RemoveItemPayload, error) {
	var id string
	{
		id = inventoryRemoveItemID
	}
	var itemID string
	{
		itemID = inventoryRemoveItemItemID
	}
	v := &inventory.RemoveItemPayload{}
	v.ID = id
	v.ItemID = itemID

	return v, nil
}

// BuildRemovePayload builds the payload for the inventory remove endpoint from
// CLI flags.
func BuildRemovePayload(inventoryRemoveID string) (*inventory.RemovePayload, error) {
	var id string
	{
		id = inventoryRemoveID
	}
	v := &inventory.RemovePayload{}
	v.ID = id

	return v, nil
}

// BuildUpdatePayload builds the payload for the inventory update endpoint from
// CLI flags.
func BuildUpdatePayload(inventoryUpdateBody string, inventoryUpdateID string) (*inventory.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(inventoryUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"inventory\": {\n         \"character\": {\n            \"description\": \"A splintered fragment of the same primordial power as the Ancients themselves, Zet endeavors to end the disharmony among the warring factions through whatever means necessary. Solitary foes are thrown into a volatile state of Flux, ripping away their health over time. Distorting space to generate a Protective Field sheltering around allies, evading and attacking with greater efficiency. Zet summons Spark Fragments of its former self that circles in place, and seek out nearby foes. Is there one Arc Warden, or two? Armed with the original\\'s items and abilities, the Self\\'s Tempest Double duplicates each spell and every attack, bringing twice the chaos to any fight.\",\n            \"experience\": 65.21,\n            \"health\": 12.6,\n            \"id\": \"123abc\",\n            \"name\": \"Arc Warden\"\n         },\n         \"items\": [\n            {\n               \"damage\": 37.8267,\n               \"description\": \"Boots of Travel is an item purchasable at the Base Shop, under Accessories. It can be upgraded by purchasing the recipe again.\",\n               \"healing\": 12.6,\n               \"id\": \"123abc\",\n               \"name\": \"Boots of travel\",\n               \"protection\": 65.21\n            },\n            {\n               \"damage\": 37.8267,\n               \"description\": \"Boots of Travel is an item purchasable at the Base Shop, under Accessories. It can be upgraded by purchasing the recipe again.\",\n               \"healing\": 12.6,\n               \"id\": \"123abc\",\n               \"name\": \"Boots of travel\",\n               \"protection\": 65.21\n            }\n         ]\n      }\n   }'")
		}
		if body.Inventory == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("inventory", "body"))
		}
		if body.Inventory != nil {
			if err2 := ValidateInventoryRequestBody(body.Inventory); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = inventoryUpdateID
	}
	v := &inventory.UpdatePayload{}
	if body.Inventory != nil {
		v.Inventory = marshalInventoryRequestBodyToInventoryInventory(body.Inventory)
	}
	v.ID = id

	return v, nil
}
