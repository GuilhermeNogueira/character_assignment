// Code generated by goa v3.8.5, DO NOT EDIT.
//
// inventory HTTP client types
//
// Command:
// $ goa gen characters/design

package client

import (
	inventory "characters/gen/inventory"
	inventoryviews "characters/gen/inventory/views"

	goa "goa.design/goa/v3/pkg"
)

// AddItemRequestBody is the type of the "inventory" service "addItem" endpoint
// HTTP request body.
type AddItemRequestBody struct {
	// View to render
	View *string `form:"view,omitempty" json:"view,omitempty" xml:"view,omitempty"`
}

// ListResponseBody is the type of the "inventory" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredInventoryResponse

// ShowResponseBody is the type of the "inventory" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the inventory.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// CharacterId
	CharacterID *string `form:"characterId,omitempty" json:"characterId,omitempty" xml:"characterId,omitempty"`
	// Character items
	Items []*StoredItemResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// ShowItemResponseBody is the type of the "inventory" service "showItem"
// endpoint HTTP response body.
type ShowItemResponseBody []*StoredItemResponse

// AddItemResponseBody is the type of the "inventory" service "addItem"
// endpoint HTTP response body.
type AddItemResponseBody struct {
	// ID is the unique id of the inventory.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// CharacterId
	CharacterID *string `form:"characterId,omitempty" json:"characterId,omitempty" xml:"characterId,omitempty"`
	// Character items
	Items []*StoredItemResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// RemoveItemResponseBody is the type of the "inventory" service "removeItem"
// endpoint HTTP response body.
type RemoveItemResponseBody struct {
	// ID is the unique id of the inventory.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// CharacterId
	CharacterID *string `form:"characterId,omitempty" json:"characterId,omitempty" xml:"characterId,omitempty"`
	// Character items
	Items []*StoredItemResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "inventory" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ShowItemNotFoundResponseBody is the type of the "inventory" service
// "showItem" endpoint HTTP response body for the "not_found" error.
type ShowItemNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// StoredInventoryResponse is used to define fields on response body types.
type StoredInventoryResponse struct {
	// ID is the unique id of the inventory.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// CharacterId
	CharacterID *string `form:"characterId,omitempty" json:"characterId,omitempty" xml:"characterId,omitempty"`
	// Character items
	Items []*StoredItemResponse `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// StoredItemResponse is used to define fields on response body types.
type StoredItemResponse struct {
	// ID is the unique id of the Item.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Damage
	Damage *float64 `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Healing
	Healing *float64 `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Protection
	Protection *float64 `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// StoredItemResponseBody is used to define fields on response body types.
type StoredItemResponseBody struct {
	// ID is the unique id of the Item.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Damage
	Damage *float64 `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Healing
	Healing *float64 `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Protection
	Protection *float64 `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// NewAddItemRequestBody builds the HTTP request body from the payload of the
// "addItem" endpoint of the "inventory" service.
func NewAddItemRequestBody(p *inventory.AddItemPayload) *AddItemRequestBody {
	body := &AddItemRequestBody{
		View: p.View,
	}
	return body
}

// NewListStoredInventoryCollectionOK builds a "inventory" service "list"
// endpoint result from a HTTP "OK" response.
func NewListStoredInventoryCollectionOK(body ListResponseBody) inventoryviews.StoredInventoryCollectionView {
	v := make([]*inventoryviews.StoredInventoryView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredInventoryResponseToInventoryviewsStoredInventoryView(val)
	}

	return v
}

// NewShowStoredInventoryOK builds a "inventory" service "show" endpoint result
// from a HTTP "OK" response.
func NewShowStoredInventoryOK(body *ShowResponseBody) *inventoryviews.StoredInventoryView {
	v := &inventoryviews.StoredInventoryView{
		ID:          body.ID,
		CharacterID: body.CharacterID,
	}
	v.Items = make([]*inventoryviews.StoredItemView, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalStoredItemResponseBodyToInventoryviewsStoredItemView(val)
	}

	return v
}

// NewShowNotFound builds a inventory service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *inventory.NotFound {
	v := &inventory.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewShowItemStoredItemCollectionOK builds a "inventory" service "showItem"
// endpoint result from a HTTP "OK" response.
func NewShowItemStoredItemCollectionOK(body ShowItemResponseBody) inventoryviews.StoredItemCollectionView {
	v := make([]*inventoryviews.StoredItemView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredItemResponseToInventoryviewsStoredItemView(val)
	}

	return v
}

// NewShowItemNotFound builds a inventory service showItem endpoint not_found
// error.
func NewShowItemNotFound(body *ShowItemNotFoundResponseBody) *inventory.NotFound {
	v := &inventory.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewAddItemStoredInventoryOK builds a "inventory" service "addItem" endpoint
// result from a HTTP "OK" response.
func NewAddItemStoredInventoryOK(body *AddItemResponseBody) *inventoryviews.StoredInventoryView {
	v := &inventoryviews.StoredInventoryView{
		ID:          body.ID,
		CharacterID: body.CharacterID,
	}
	v.Items = make([]*inventoryviews.StoredItemView, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalStoredItemResponseBodyToInventoryviewsStoredItemView(val)
	}

	return v
}

// NewRemoveItemStoredInventoryOK builds a "inventory" service "removeItem"
// endpoint result from a HTTP "OK" response.
func NewRemoveItemStoredInventoryOK(body *RemoveItemResponseBody) *inventoryviews.StoredInventoryView {
	v := &inventoryviews.StoredInventoryView{
		ID:          body.ID,
		CharacterID: body.CharacterID,
	}
	v.Items = make([]*inventoryviews.StoredItemView, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalStoredItemResponseBodyToInventoryviewsStoredItemView(val)
	}

	return v
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateShowItemNotFoundResponseBody runs the validations defined on
// showItem_not_found_response_body
func ValidateShowItemNotFoundResponseBody(body *ShowItemNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateStoredInventoryResponse runs the validations defined on
// StoredInventoryResponse
func ValidateStoredInventoryResponse(body *StoredInventoryResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.CharacterID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("characterId", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateStoredItemResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredItemResponse runs the validations defined on StoredItemResponse
func ValidateStoredItemResponse(body *StoredItemResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateStoredItemResponseBody runs the validations defined on
// StoredItemResponseBody
func ValidateStoredItemResponseBody(body *StoredItemResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
