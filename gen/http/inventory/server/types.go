// Code generated by goa v3.8.5, DO NOT EDIT.
//
// inventory HTTP server types
//
// Command:
// $ goa gen characters/design

package server

import (
	inventory "characters/gen/inventory"
	inventoryviews "characters/gen/inventory/views"

	goa "goa.design/goa/v3/pkg"
)

// AddItemRequestBody is the type of the "inventory" service "addItem" endpoint
// HTTP request body.
type AddItemRequestBody struct {
	// View to render
	View *string `form:"view,omitempty" json:"view,omitempty" xml:"view,omitempty"`
}

// StoredInventoryResponseTinyCollection is the type of the "inventory" service
// "list" endpoint HTTP response body.
type StoredInventoryResponseTinyCollection []*StoredInventoryResponseTiny

// ShowResponseBody is the type of the "inventory" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the inventory.
	ID string `form:"id" json:"id" xml:"id"`
	// CharacterId
	CharacterID string `form:"characterId" json:"characterId" xml:"characterId"`
	// Character items
	Items []*StoredItemResponseBodyTiny `form:"items" json:"items" xml:"items"`
}

// ShowResponseBodyTiny is the type of the "inventory" service "show" endpoint
// HTTP response body.
type ShowResponseBodyTiny struct {
	// ID is the unique id of the inventory.
	ID string `form:"id" json:"id" xml:"id"`
	// CharacterId
	CharacterID string `form:"characterId" json:"characterId" xml:"characterId"`
	// Character items
	Items []*StoredItemResponseBodyTiny `form:"items" json:"items" xml:"items"`
}

// StoredItemResponseTinyCollection is the type of the "inventory" service
// "showItem" endpoint HTTP response body.
type StoredItemResponseTinyCollection []*StoredItemResponseTiny

// AddItemResponseBody is the type of the "inventory" service "addItem"
// endpoint HTTP response body.
type AddItemResponseBody struct {
	// ID is the unique id of the inventory.
	ID string `form:"id" json:"id" xml:"id"`
	// CharacterId
	CharacterID string `form:"characterId" json:"characterId" xml:"characterId"`
	// Character items
	Items []*StoredItemResponseBodyTiny `form:"items" json:"items" xml:"items"`
}

// AddItemResponseBodyTiny is the type of the "inventory" service "addItem"
// endpoint HTTP response body.
type AddItemResponseBodyTiny struct {
	// ID is the unique id of the inventory.
	ID string `form:"id" json:"id" xml:"id"`
	// CharacterId
	CharacterID string `form:"characterId" json:"characterId" xml:"characterId"`
	// Character items
	Items []*StoredItemResponseBodyTiny `form:"items" json:"items" xml:"items"`
}

// RemoveItemResponseBody is the type of the "inventory" service "removeItem"
// endpoint HTTP response body.
type RemoveItemResponseBody struct {
	// ID is the unique id of the inventory.
	ID string `form:"id" json:"id" xml:"id"`
	// CharacterId
	CharacterID string `form:"characterId" json:"characterId" xml:"characterId"`
	// Character items
	Items []*StoredItemResponseBodyTiny `form:"items" json:"items" xml:"items"`
}

// RemoveItemResponseBodyTiny is the type of the "inventory" service
// "removeItem" endpoint HTTP response body.
type RemoveItemResponseBodyTiny struct {
	// ID is the unique id of the inventory.
	ID string `form:"id" json:"id" xml:"id"`
	// CharacterId
	CharacterID string `form:"characterId" json:"characterId" xml:"characterId"`
	// Character items
	Items []*StoredItemResponseBodyTiny `form:"items" json:"items" xml:"items"`
}

// ShowNotFoundResponseBody is the type of the "inventory" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing resource
	ID string `form:"id" json:"id" xml:"id"`
}

// ShowItemNotFoundResponseBody is the type of the "inventory" service
// "showItem" endpoint HTTP response body for the "not_found" error.
type ShowItemNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing resource
	ID string `form:"id" json:"id" xml:"id"`
}

// StoredInventoryResponseTiny is used to define fields on response body types.
type StoredInventoryResponseTiny struct {
	// ID is the unique id of the inventory.
	ID string `form:"id" json:"id" xml:"id"`
	// CharacterId
	CharacterID string `form:"characterId" json:"characterId" xml:"characterId"`
	// Character items
	Items []*StoredItemResponseTiny `form:"items" json:"items" xml:"items"`
}

// StoredItemResponseTiny is used to define fields on response body types.
type StoredItemResponseTiny struct {
	// ID is the unique id of the Item.
	ID string `form:"id" json:"id" xml:"id"`
	// Name
	Name string `form:"name" json:"name" xml:"name"`
	// Damage
	Damage float64 `form:"damage" json:"damage" xml:"damage"`
	// Healing
	Healing float64 `form:"healing" json:"healing" xml:"healing"`
	// Protection
	Protection float64 `form:"protection" json:"protection" xml:"protection"`
}

// StoredItemResponseBodyTiny is used to define fields on response body types.
type StoredItemResponseBodyTiny struct {
	// ID is the unique id of the Item.
	ID string `form:"id" json:"id" xml:"id"`
	// Name
	Name string `form:"name" json:"name" xml:"name"`
	// Damage
	Damage float64 `form:"damage" json:"damage" xml:"damage"`
	// Healing
	Healing float64 `form:"healing" json:"healing" xml:"healing"`
	// Protection
	Protection float64 `form:"protection" json:"protection" xml:"protection"`
}

// NewStoredInventoryResponseTinyCollection builds the HTTP response body from
// the result of the "list" endpoint of the "inventory" service.
func NewStoredInventoryResponseTinyCollection(res inventoryviews.StoredInventoryCollectionView) StoredInventoryResponseTinyCollection {
	body := make([]*StoredInventoryResponseTiny, len(res))
	for i, val := range res {
		body[i] = marshalInventoryviewsStoredInventoryViewToStoredInventoryResponseTiny(val)
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "inventory" service.
func NewShowResponseBody(res *inventoryviews.StoredInventoryView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:          *res.ID,
		CharacterID: *res.CharacterID,
	}
	if res.Items != nil {
		body.Items = make([]*StoredItemResponseBodyTiny, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalInventoryviewsStoredItemViewToStoredItemResponseBodyTiny(val)
		}
	}
	return body
}

// NewShowResponseBodyTiny builds the HTTP response body from the result of the
// "show" endpoint of the "inventory" service.
func NewShowResponseBodyTiny(res *inventoryviews.StoredInventoryView) *ShowResponseBodyTiny {
	body := &ShowResponseBodyTiny{
		ID:          *res.ID,
		CharacterID: *res.CharacterID,
	}
	if res.Items != nil {
		body.Items = make([]*StoredItemResponseBodyTiny, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalInventoryviewsStoredItemViewToStoredItemResponseBodyTiny(val)
		}
	}
	return body
}

// NewStoredItemResponseTinyCollection builds the HTTP response body from the
// result of the "showItem" endpoint of the "inventory" service.
func NewStoredItemResponseTinyCollection(res inventoryviews.StoredItemCollectionView) StoredItemResponseTinyCollection {
	body := make([]*StoredItemResponseTiny, len(res))
	for i, val := range res {
		body[i] = marshalInventoryviewsStoredItemViewToStoredItemResponseTiny(val)
	}
	return body
}

// NewAddItemResponseBody builds the HTTP response body from the result of the
// "addItem" endpoint of the "inventory" service.
func NewAddItemResponseBody(res *inventoryviews.StoredInventoryView) *AddItemResponseBody {
	body := &AddItemResponseBody{
		ID:          *res.ID,
		CharacterID: *res.CharacterID,
	}
	if res.Items != nil {
		body.Items = make([]*StoredItemResponseBodyTiny, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalInventoryviewsStoredItemViewToStoredItemResponseBodyTiny(val)
		}
	}
	return body
}

// NewAddItemResponseBodyTiny builds the HTTP response body from the result of
// the "addItem" endpoint of the "inventory" service.
func NewAddItemResponseBodyTiny(res *inventoryviews.StoredInventoryView) *AddItemResponseBodyTiny {
	body := &AddItemResponseBodyTiny{
		ID:          *res.ID,
		CharacterID: *res.CharacterID,
	}
	if res.Items != nil {
		body.Items = make([]*StoredItemResponseBodyTiny, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalInventoryviewsStoredItemViewToStoredItemResponseBodyTiny(val)
		}
	}
	return body
}

// NewRemoveItemResponseBody builds the HTTP response body from the result of
// the "removeItem" endpoint of the "inventory" service.
func NewRemoveItemResponseBody(res *inventoryviews.StoredInventoryView) *RemoveItemResponseBody {
	body := &RemoveItemResponseBody{
		ID:          *res.ID,
		CharacterID: *res.CharacterID,
	}
	if res.Items != nil {
		body.Items = make([]*StoredItemResponseBodyTiny, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalInventoryviewsStoredItemViewToStoredItemResponseBodyTiny(val)
		}
	}
	return body
}

// NewRemoveItemResponseBodyTiny builds the HTTP response body from the result
// of the "removeItem" endpoint of the "inventory" service.
func NewRemoveItemResponseBodyTiny(res *inventoryviews.StoredInventoryView) *RemoveItemResponseBodyTiny {
	body := &RemoveItemResponseBodyTiny{
		ID:          *res.ID,
		CharacterID: *res.CharacterID,
	}
	if res.Items != nil {
		body.Items = make([]*StoredItemResponseBodyTiny, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalInventoryviewsStoredItemViewToStoredItemResponseBodyTiny(val)
		}
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "inventory" service.
func NewShowNotFoundResponseBody(res *inventory.NotFound) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewShowItemNotFoundResponseBody builds the HTTP response body from the
// result of the "showItem" endpoint of the "inventory" service.
func NewShowItemNotFoundResponseBody(res *inventory.NotFound) *ShowItemNotFoundResponseBody {
	body := &ShowItemNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewListPayload builds a inventory service list endpoint payload.
func NewListPayload(characterID string) *inventory.ListPayload {
	v := &inventory.ListPayload{}
	v.CharacterID = characterID

	return v
}

// NewShowPayload builds a inventory service show endpoint payload.
func NewShowPayload(characterID string, id string, view *string) *inventory.ShowPayload {
	v := &inventory.ShowPayload{}
	v.CharacterID = &characterID
	v.ID = id
	v.View = view

	return v
}

// NewShowItemPayload builds a inventory service showItem endpoint payload.
func NewShowItemPayload(characterID string, id string, view *string) *inventory.ShowItemPayload {
	v := &inventory.ShowItemPayload{}
	v.CharacterID = &characterID
	v.ID = id
	v.View = view

	return v
}

// NewAddPayload builds a inventory service add endpoint payload.
func NewAddPayload(characterID string) *inventory.AddPayload {
	v := &inventory.AddPayload{}
	v.CharacterID = characterID

	return v
}

// NewAddItemPayload builds a inventory service addItem endpoint payload.
func NewAddItemPayload(body *AddItemRequestBody, characterID string, id string, itemID string) *inventory.AddItemPayload {
	v := &inventory.AddItemPayload{
		View: body.View,
	}
	v.CharacterID = &characterID
	v.ID = id
	v.ItemID = itemID

	return v
}

// NewRemoveItemPayload builds a inventory service removeItem endpoint payload.
func NewRemoveItemPayload(characterID string, id string, itemID string) *inventory.RemoveItemPayload {
	v := &inventory.RemoveItemPayload{}
	v.CharacterID = &characterID
	v.ID = id
	v.ItemID = itemID

	return v
}

// NewRemovePayload builds a inventory service remove endpoint payload.
func NewRemovePayload(characterID string, id string) *inventory.RemovePayload {
	v := &inventory.RemovePayload{}
	v.CharacterID = &characterID
	v.ID = id

	return v
}

// ValidateAddItemRequestBody runs the validations defined on AddItemRequestBody
func ValidateAddItemRequestBody(body *AddItemRequestBody) (err error) {
	if body.View != nil {
		if !(*body.View == "default" || *body.View == "tiny") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.view", *body.View, []interface{}{"default", "tiny"}))
		}
	}
	return
}
