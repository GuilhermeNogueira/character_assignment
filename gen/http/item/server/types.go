// Code generated by goa v3.8.5, DO NOT EDIT.
//
// item HTTP server types
//
// Command:
// $ goa gen characters/design

package server

import (
	item "characters/gen/item"
	itemviews "characters/gen/item/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "item" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Damage
	Damage *float64 `form:"damage,omitempty" json:"damage,omitempty" xml:"damage,omitempty"`
	// Healing
	Healing *float64 `form:"healing,omitempty" json:"healing,omitempty" xml:"healing,omitempty"`
	// Protection
	Protection *float64 `form:"protection,omitempty" json:"protection,omitempty" xml:"protection,omitempty"`
}

// UpdateRequestBody is the type of the "item" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// item to update
	Character *CharacterRequestBody `form:"character,omitempty" json:"character,omitempty" xml:"character,omitempty"`
}

// StoredItemResponseTinyCollection is the type of the "item" service "list"
// endpoint HTTP response body.
type StoredItemResponseTinyCollection []*StoredItemResponseTiny

// ShowResponseBody is the type of the "item" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID is the unique id of the Item.
	ID string `form:"id" json:"id" xml:"id"`
	// Name
	Name string `form:"name" json:"name" xml:"name"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Damage
	Damage float64 `form:"damage" json:"damage" xml:"damage"`
	// Healing
	Healing float64 `form:"healing" json:"healing" xml:"healing"`
	// Protection
	Protection float64 `form:"protection" json:"protection" xml:"protection"`
}

// ShowResponseBodyTiny is the type of the "item" service "show" endpoint HTTP
// response body.
type ShowResponseBodyTiny struct {
	// ID is the unique id of the Item.
	ID string `form:"id" json:"id" xml:"id"`
	// Name
	Name string `form:"name" json:"name" xml:"name"`
	// Damage
	Damage float64 `form:"damage" json:"damage" xml:"damage"`
	// Healing
	Healing float64 `form:"healing" json:"healing" xml:"healing"`
	// Protection
	Protection float64 `form:"protection" json:"protection" xml:"protection"`
}

// ShowNotFoundResponseBody is the type of the "item" service "show" endpoint
// HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing resource
	ID string `form:"id" json:"id" xml:"id"`
}

// StoredItemResponseTiny is used to define fields on response body types.
type StoredItemResponseTiny struct {
	// ID is the unique id of the Item.
	ID string `form:"id" json:"id" xml:"id"`
	// Name
	Name string `form:"name" json:"name" xml:"name"`
	// Damage
	Damage float64 `form:"damage" json:"damage" xml:"damage"`
	// Healing
	Healing float64 `form:"healing" json:"healing" xml:"healing"`
	// Protection
	Protection float64 `form:"protection" json:"protection" xml:"protection"`
}

// CharacterRequestBody is used to define fields on request body types.
type CharacterRequestBody struct {
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Health
	Health *float64 `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Experience
	Experience *float64 `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// NewStoredItemResponseTinyCollection builds the HTTP response body from the
// result of the "list" endpoint of the "item" service.
func NewStoredItemResponseTinyCollection(res itemviews.StoredItemCollectionView) StoredItemResponseTinyCollection {
	body := make([]*StoredItemResponseTiny, len(res))
	for i, val := range res {
		body[i] = marshalItemviewsStoredItemViewToStoredItemResponseTiny(val)
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "item" service.
func NewShowResponseBody(res *itemviews.StoredItemView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:          *res.ID,
		Name:        *res.Name,
		Description: res.Description,
	}
	if res.Damage != nil {
		body.Damage = *res.Damage
	}
	if res.Healing != nil {
		body.Healing = *res.Healing
	}
	if res.Protection != nil {
		body.Protection = *res.Protection
	}
	if res.Damage == nil {
		body.Damage = 0
	}
	if res.Healing == nil {
		body.Healing = 0
	}
	if res.Protection == nil {
		body.Protection = 0
	}
	return body
}

// NewShowResponseBodyTiny builds the HTTP response body from the result of the
// "show" endpoint of the "item" service.
func NewShowResponseBodyTiny(res *itemviews.StoredItemView) *ShowResponseBodyTiny {
	body := &ShowResponseBodyTiny{
		ID:   *res.ID,
		Name: *res.Name,
	}
	if res.Damage != nil {
		body.Damage = *res.Damage
	}
	if res.Healing != nil {
		body.Healing = *res.Healing
	}
	if res.Protection != nil {
		body.Protection = *res.Protection
	}
	if res.Damage == nil {
		body.Damage = 0
	}
	if res.Healing == nil {
		body.Healing = 0
	}
	if res.Protection == nil {
		body.Protection = 0
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "item" service.
func NewShowNotFoundResponseBody(res *item.NotFound) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewShowPayload builds a item service show endpoint payload.
func NewShowPayload(id string, view *string) *item.ShowPayload {
	v := &item.ShowPayload{}
	v.ID = id
	v.View = view

	return v
}

// NewAddItem builds a item service add endpoint payload.
func NewAddItem(body *AddRequestBody) *item.Item {
	v := &item.Item{
		Name:        *body.Name,
		Description: body.Description,
	}
	if body.Damage != nil {
		v.Damage = *body.Damage
	}
	if body.Healing != nil {
		v.Healing = *body.Healing
	}
	if body.Protection != nil {
		v.Protection = *body.Protection
	}
	if body.Damage == nil {
		v.Damage = 0
	}
	if body.Healing == nil {
		v.Healing = 0
	}
	if body.Protection == nil {
		v.Protection = 0
	}

	return v
}

// NewRemovePayload builds a item service remove endpoint payload.
func NewRemovePayload(id string) *item.RemovePayload {
	v := &item.RemovePayload{}
	v.ID = id

	return v
}

// NewUpdatePayload builds a item service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id string) *item.UpdatePayload {
	v := &item.UpdatePayload{}
	v.Character = unmarshalCharacterRequestBodyToItemCharacter(body.Character)
	v.ID = id

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Character == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("character", "body"))
	}
	if body.Character != nil {
		if err2 := ValidateCharacterRequestBody(body.Character); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCharacterRequestBody runs the validations defined on
// CharacterRequestBody
func ValidateCharacterRequestBody(body *CharacterRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Health == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("health", "body"))
	}
	if body.Experience == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("experience", "body"))
	}
	return
}
